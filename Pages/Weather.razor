@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Grid TItem="WeatherForecast" class="table table-hover table-bordered table-striped" Data="forecasts.ToList()" AllowFiltering="true" Responsive="true">
        <GridColumn TItem="WeatherForecast" HeaderText="Date" PropertyName="Date" SortKeySelector="item => item.Date">
            @context.Date.ToShortDateString()
        </GridColumn>
        <GridColumn TItem="WeatherForecast" HeaderText="Temp. (C)" PropertyName="TemperatureC" SortKeySelector="item => item.TemperatureC">
            @context.TemperatureC
        </GridColumn>
        <GridColumn TItem="WeatherForecast" HeaderText="Temp. (F)" PropertyName="TemperatureF" SortKeySelector="item => item.TemperatureF">
            @context.TemperatureF
        </GridColumn>
        <GridColumn TItem="WeatherForecast" HeaderText="Summary" PropertyName="Summary" SortKeySelector="item => item.Summary">
            @context.Summary
        </GridColumn>
    </Grid>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
